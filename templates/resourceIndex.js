export default function resourceIndexTemplate(
  name,
  pluralName,
  pascalName,
  camelName,
  repoName,
  type,
  extraFields = []
) {
  const generateExtraFields = (fields) => {
    return fields
      .map((field) => `    ${field.name}: data.${field.name},`)
      .join("\n");
  };

  const extraFieldLines = generateExtraFields(extraFields);

  return `
import { PaginationResourceType } from '@web/base/types/paginate';
import { buildPaginatedResource } from '@web/base/buildPaginatedResource';
import { ${camelName} } from "@prisma/client";

/**
 *
 * The ${pascalName}Resource is implement for sending data with requirements of desire template.
 * Generated By mini-express-generator(https://www.npmjs.com/package/mini-express-generator)
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 * SOP @author Htin Lin Phyo
 * https://github.com/htinlinnphyo123
 * his personal portfolio is not implement yet!
 *
 */

type Paginate${pascalName}Type = {
  data: ${camelName}[];
} & PaginationResourceType;

const transform${pascalName} = (data: ${camelName}) => {
  return {
    id: data.id,
    ${extraFieldLines}
    createdAt: data.createdAt,
  };
};

export const index${pascalName}Resource = (data: Paginate${pascalName}Type) => {
  return buildPaginatedResource(data, transform${pascalName});
};

export const getAll${pascalName} = (data: ${camelName}[]) => {
  return data.map(transform${pascalName});
};

export const show${pascalName}Resource = (data: ${camelName}) => ({
  ...transform${pascalName}(data),
});
`;
}
