export default function serviceTemplate(
  name,
  pluralName,
  pascalName,
  camelName,
  repoName,
  type
) {
  const space = "";

  return `import getPagination from '@util/request/get-pagination';
import { ${camelName}Repository } from "@/modules/domain/${repoName}/${camelName}.repository";
import { index${pascalName}Resource, show${pascalName}Resource } from "../resources";
import { generateId } from '@/utils/id-generator';
import { NotFoundError } from '@/utils/error-handler';

  /**
   *
   * The ${pascalName}Service is the manager of methods.
   * Generated By mini-express-generator(https://www.npmjs.com/package/mini-express-generator)
   * @author Nay Ba la
   * https://github.com/naybala
   * https://naybala.netlify.app/
   * SOP @author Htin Linn Phyo
   * https://github.com/htinlinnphyo123
   * https://htinlinnphyo.vercel.app/
   *
   */

const folderName = "${pluralName}";
const createFail = "${pascalName} create failed";
const updateFail = "${pascalName} update failed";
const deleteFail = "${pascalName} delete failed";
const notFound = "${pascalName} not Found";

// GET ALL with pagination
export const index = async (req: any) => {
  const { page, limit } = getPagination(req.query);
  const search = req.query.search?.toString()?.replace(/[.*+?^${space}()|[\]\\]/g, '\\$&') || '';

  const ${pluralName}Data:any = await ${camelName}Repository()
    .select(['id'])
    .order('id')
    //.orWhereLike('name',search)
    .getWithPaginate(page,limit);
  return index${pascalName}Resource(${pluralName}Data);
};

// CREATE
export const store = async (data: any,createdUser: string) => {
  const id = generateId(17);
  data.id = id;
  data.createdUser = createdUser;
  const ${camelName}Data:any = await ${camelName}Repository().create(data);
  if (!${camelName}Data) {
    throw new Error(createFail);
  }
  return ${camelName}Data;
};

// GET SINGLE
export const show = async (id: string) => {
  const ${camelName}Data:any = await ${camelName}Repository().find(id);
  if (!${camelName}Data) {
    throw new NotFoundError(notFound);
  }
  return show${pascalName}Resource(${camelName}Data);
};

// UPDATE
export const update = async (id: string, data: any, updatedUser: string) => {
  const existing = await ${camelName}Repository().find(id);
  if (!existing) {
    throw new Error(notFound);
  }
  data.updatedUser = updatedUser;
  const ${camelName}Data:any = await ${camelName}Repository().update(id, data);
  if (!${camelName}Data) {
      throw new Error(updateFail);
  }
  return ${camelName}Data;
};

// SOFT DELETE
export const destroy = async (id: string) => {
  const existing = await ${camelName}Repository().find(id);
  if (!existing) {
    throw new Error(notFound);
  }
  const ${camelName}Deleted = await ${camelName}Repository().delete(id);
  if (!${camelName}Deleted) {
      throw new Error(deleteFail);
  }
  return ${camelName}Deleted;
};
`;
}
