export default function controllerTemplate(
  name,
  pluralName,
  pascalName,
  camelName,
  repoName,
  type
) {
  return `import { Request, Response } from "express";
import { matchedData } from "express-validator";
import * as ${pascalName}Service from "../services";

const indexSuccess = "${pascalName} index success";
const userNotFound = "User not found";
const createSuccess = "${pascalName} create success";
const showSuccess = "${pascalName} show success";
const updateSuccess = "${pascalName} update success";
const deleteSuccess = "${pascalName} delete success";

/**
 *
 * The ${pascalName}Controller is responsible for receive request.
 * The service list in the ${pascalName}Service and return response.
 * Generated By mini-express-generator(https://www.npmjs.com/package/mini-express-generator)
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 * SOP @author Htin Lin Phyo
 * https://github.com/htinlinnphyo123
 * his personal portfolio is not implement yet!
 *
 */


export const index = async (req: Request, res: Response): Promise<void> => {
  try {
    const ${repoName}:any = await ${pascalName}Service.index(req);
    res.successResponse(${repoName}, indexSuccess);
  } catch (error) {
    res.failResponse(error);
  }
};

export const store = async (req: Request, res: Response): Promise<void> => {
  try {
    const validated = matchedData(req, { locations: ["body"] });
    if(!req.user?.id) throw new Error(userNotFound);
    const ${repoName}:any = await ${pascalName}Service.store(validated, req.user.id);
    res.successResponse(${repoName}, createSuccess);
  } catch (error) {
    res.failResponse(error);
  }
};

export const show = async (req: Request, res: Response): Promise<void> => {
  try {
    const ${repoName}:any = await ${pascalName}Service.show(req.params.id);
    res.successResponse(${repoName}, showSuccess);
  } catch (error) {
    res.failResponse(error);
  }
};

export const update = async (req: Request, res: Response): Promise<void> => {
  try {
    const validated:any = matchedData(req, { locations: ["body"] });
    if(!req.user?.id) throw new Error(userNotFound);
    const ${repoName}:any = await ${pascalName}Service.update( 
      req.params.id,
      validated,
      req.user.id
      );
    res.successResponse(${repoName}, updateSuccess);
  } catch (error) {
    res.failResponse(error);
  }
};

export const destroy = async (req: Request, res: Response): Promise<void> => {
  try {
    const deleted:any = await ${pascalName}Service.destroy(req.params.id);
    res.successResponse(deleted, deleteSuccess);
  } catch (error) {
    res.failResponse(error);
  }
};
`;
}
